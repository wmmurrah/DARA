cor <- lower2full(c(0.31, 1.00,
0.33, 0.05, 1.00,
0.21, 0.16, 0.16, 1.00,
0.20, 0.25, 0.11, 0.22, 1.00))
cor <- lower2full(c(0.31, 1.00,
0.33, 0.05, 1.00,
0.21, 0.16, 0.16, 1.00,
0.20, 0.25, 0.11, 0.22, 1.00))
library(lavaan)
cor <- lower2full(c(0.31, 1.00,
0.33, 0.05, 1.00,
0.21, 0.16, 0.16, 1.00,
0.20, 0.25, 0.11, 0.22, 1.00))
cor <- lower2full(c(0.31, 1.00,
0.33, 0.05, 1.00,
0.21, 0.16, 0.16, 1.00,
0.20, 0.25, 0.11, 0.22, 1.00), diagonal=TRUE)
cor <- lower2full(c(1.00,
0.31, 1.00,
0.33, 0.05, 1.00,
0.21, 0.16, 0.16, 1.00,
0.20, 0.25, 0.11, 0.22, 1.00))
colnames(cor) <- rownames(cor) <- c('shapes','turns','day.night','WM')
colnames(cor) <- rownames(cor) <- c('touch','shapes','turns','day.night','WM')
model.1 <- '
f1 =~ touch + shapes + turns + day.night + WM
'
fit.1 <- cfa(model.1, sample.cov = cor, sample.nobs = 181)
summary(fit.1, fit.measures=TRUE, standardize=TRUE, rsquare=TRUE)
library(psych)
fa2 <- fa(cor, 2, n.obs=181)
fa2
cor <- lower2full(c(1.00,
0.31, 1.00,
0.33, 0.14, 1.00,
0.21, 0.16, 0.16, 1.00,
0.20, 0.25, 0.11, 0.22, 1.00))
View(cor)
fa2 <- fa(cor, 2, n.obs=181)
fa2
colnames(cor) <- rownames(cor) <- c('touch','shapes','turns','day.night','WM')
model.1 <- '
f1 =~ touch + shapes + turns + day.night + WM
'
fit.1 <- cfa(model.1, sample.cov = cor, sample.nobs = 181)
summary(fit.1, fit.measures=TRUE, standardize=TRUE, rsquare=TRUE)
fa1 <- fa(cor, 1, n.obs=181)
fa1
fa2 <- fa(cor, 2, n.obs=181)
fa2
heart1 = function(name){
t = seq(0,60,len=100)
plot(c(-8,8),c(0,20),type='n',axes=FALSE,xlab='',ylab='')
x = -.01*(-t^2+40*t+1200)*sin(pi*t/180)
y = .01*(-t^2+40*t+1200)*cos(pi*t/180)
lines(x,y, lwd=4)
lines(-x,y, lwd=4)
text(0,7,"Happy Birthday Day",col='red',cex=2.5)
text(0,5.5,name,col='red',cex=2.5)
}
heart1("Katie")
install.packages("ca")
model.2 <- '
f1 =~ NA*touch + shapes + turns + day.night + 0*WM
f2 =~ NA*WM + shapes + turns + day.night + 0*touch
f1 ~~ 1*f1
f2 ~~ 1*f2
'
fit.2 <- cfa(model.2, sample.cov=cor, sample.nobs = 181)
library(lavaan)
fit.2 <- cfa(model.2, sample.cov=cor, sample.nobs = 181)
summary(fit.2, fit.measures=TRUE, standardize=TRUE, rsquare=TRUE)
summary(fit.1, fit.measures=TRUE, standardize=TRUE, rsquare=TRUE)
(2518.553-2520.457)/2
fit.3 <- cfa(model.3, sample.cov=cor, sample.nobs=181)
model.3 <- '
f1 =~ touch + turns
f2 =~ WM + shapes + day.night
'
fit.3 <- cfa(model.3, sample.cov=cor, sample.nobs=181)
summary(fit.3, fit.measures=TRUE, standardize=TRUE, rsquare=TRUE)
summary(fit.1, fit.measures=TRUE, standardize=TRUE, rsquare=TRUE)
fit.3 <- cfa(model.3, sample.cov=cor, sample.nobs=181, std.lv=TRUE)
summary(fit.3, fit.measures=TRUE, standardize=TRUE, rsquare=TRUE)
source('http://openmx.psyc.virginia.edu/getOpenMx.R')
install.packages("Formula")
install.packages("ape")
library(lavaan)
library(simsem)
popmodel <- '
VS ~ 0.35*tx
'
VS.fit <- sem(popmodel, do.fit=FALSE)
summary(VS.fit, rsquare=TRUE)
an.model <- '
VS ~ tx
'
VS.power <- sim(100, an.model, 144, popmodel)
VS.power <- sim(nRep = 100, model = an.model, n = 144, generate = popmodel)
install.packages("RcmdrPlugin.DoE")
library(Rcmdr)
install.packages("pwr")
library("pwr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
library(lavaan)
library(simsem)
library(rstan)
cat("Stan version:", stan_version(), "\n")
stanmodelcode <- "
data {
int<lower=0> N;
real y[N];
}
parameters {
real mu;
}
model {
mu ~ normal(0, 10);
y ~ normal(mu, 1);
}
"
y <- rnorm(20)
dat <- list(N = 20, y = y);
fit <- stan(model_code = stanmodelcode, model_name = "example",
data = dat, iter = 2012, chains = 3, sample_file = 'norm.csv',
verbose = TRUE)
summary(fit)
print(fit)
e <- extract(fit, permuted = TRUE) # return a list of arrays
mu <- e$mu
mu
m <- extract(fit, permuted = FALSE, inc_warmup = FALSE) # return an array
print(dimnames(m))
m2 <- as.array(fit)
install.packages(c("httr", "RCurl", "RJSONIO"))
library(devtools)
install_github("semutils", "JWiley")
install.packages("gridExtra")
install_github("semutils", "JWiley")
l1 <- -.5(5^2)/25
l1 <- -.5*(5^2)/25
l2 <- -(1/(2*25)*(5)^2
l2 <- -1/(2*25)*(5)^2
l2 <- (-1/(2*25))*(5)^2
sigma2 <- 25
y <- 3
l1 <- -.5*((y-mu)^2)/25
y <- 3
mu <- 5
sigma2 <- 25
l1 <- -.5*((y-mu)^2)/25
l2 <- (-1/(2*25))*(y-mu)^2
y <- 34
mu <- 40
sigma2 <- 20
l1 <- -.5*((y-mu)^2)/25
l2 <- (-1/(2*25))*(y-mu)^2
l1 ==l2
install.packages("arm")
install.packages("plspm")
install.packages("copula")
install.packages(c("cairoDevice", "rgl", "Rglpk", "RGtk2"), lib="/usr/lib/R/site-library")
library(nycflight13)
library(nycflights13)
library(dplyr)
library(ggplot2)
library(lubridate)
data(flights)
str(flights)
View(flights)
?flights
flights
weather
?weather
planes
airlines
select(flights, year, month, day)
filter(flights, tailnum=='N14228')
flights %>%
mutate(madeup=dep_delay-arr_delay) %>%
filter(madeup>60) %>%
select(dep_delay, arr_delay, dest, madeup)
flights
flights <- flights %>%
mutate(date=ymd(paste(year, month, day, sep="-"))) %>%
na.omit()
flights
flights %>% select(date)
class(flights$date)
flights %>% group_by(date) %>% summarize(n=n())
library(tidyr)
data(religion)
data()
data(pew)
install.packages(c("corpcor", "DoE.base", "DoE.wrapper", "ggdendro", "RcmdrPlugin.EZR", "Rcpp"))
install.packages(c("corpcor", "DoE.base", "DoE.wrapper", "ggdendro",
)
install.packages(c("corpcor", "DoE.base", "DoE.wrapper", "ggdendro", "RcmdrPlugin.EZR", "Rcpp"))
install.packages(c("corpcor", "DoE.base", "DoE.wrapper", "ggdendro",
install.packages("corpcor")
install.packages("DoE.base")
install.packages("DoE.wrapper")
install.packages("ggdendro")
install.packages("RcmdrPlugin.EZR")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("lavaan")
install.packages(c("copula", "simsem"))
x = 1:100
y = x^2
plot(x,y)
exit()
q()
n
install.packages(c("BMA", "copula", "dplyr", "ggvis", "semTools"))
library(ggvis)
data(mtcars)
mtcars  %>%
ggvis(~wt, ~mpg) %>%
layer_points() %>%
layer_smooths()
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_points() %>%
layer_model_predictions(model = "lm", se = TRUE)
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_points(fill = ~factor(cyl))
mtcars %>%
ggvis(~wt, ~mpg, fill = ~factor(cyl)) %>%
layer_points() %>%
group_by(cyl) %>%
layer_model_predictions(model = "lm")
pressure %>%
ggvis(~temperature, ~pressure) %>%
layer_bars()
pressure %>%
ggvis(~temperature, ~pressure) %>%
layer_bars(width = 10)
cocaine %>% ggvis(~month, fill := "#fff8dc") %>%
layer_histograms() %>%
add_axis("x", title = "month") %>%
add_axis("y", title = "count")
mtcars %>% ggvis(~factor(cyl), ~mpg) %>% layer_boxplots()
str(x)
x = 1:10
str(x)
typeof(x)
length(x)
attributes(x)
y = c(a=1, b=2, c=3)
typeof(y)
y
length(y)
attributes(y)
y = c(a=1L, b=2L, c=3L)
typeof(y)
length(y)
attributes(y)
is.atomic(y)
is.atomic(y) || is.list(y)
is.list(y)
? ||
?||
library("bdynsys", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
bdynsys(datap, 2, 1, datap$logGDP, datap$EmanzV)
install.packages('LearnBayes')
library("LearnBayes", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
install.packages("bayesmix")
library("bayesmix", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
ata("fish", package = "bayesmix")
data("fish", package = "bayesmix")
prefix <- "fish"
variables <- c("mu","tau","eta")
k <- 3
modelFish <- BMMmodel(k = k, priors = list(kind = "independence",
parameter = "priorsFish", hierarchical = "tau"))
controlFish <- JAGScontrol(variables = c(variables, "S"), n.iter = 100)
z1 <- JAGSrun(fish, prefix, model = modelFish, initialValues = list(S0 = 2),
control = controlFish, cleanup = TRUE, tmp = FALSE)
zSort <- Sort(z1, "mu")
BMMposteriori(zSort)
data("darwin", package = "bayesmix")
prefix <- "darwin"
k <- 2
modelDarwin <- BMMmodel(k = k, priors = list(kind = "independence",
parameter = "priorsUncertain"),
aprioriWeights = c(1, 15),
no.empty.classes = TRUE, restrict = "tau")
z2 <- JAGSrun(darwin, prefix, model = modelDarwin, control =
JAGScontrol(variables = variables, n.iter = 3000,
burn.in = 1000), cleanup = TRUE, tmp = FALSE)
variables <- c("mu","tau","eta")
z2 <- JAGSrun(darwin, prefix, model = modelDarwin, control =
JAGScontrol(variables = variables, n.iter = 3000,
burn.in = 1000), cleanup = TRUE, tmp = FALSE)
plot(z2, variables = "mu")
install.packages(c("AlgDesign", "matrixStats"))
install.packages("DEoptimR")
install.packages("~/Downloads/LaplacesDemon_14.06.23.tar.gz", repos = NULL, type = "source")
library("LaplacesDemon", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
vignette("BayesianInference")
grep('beta.', variables)
grep('mu', variables)
library("BayesianFirstAid", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
bayes.binom.test(x = 39, n = 64)
fit <- bayes.binom.test(x = 39, n = 64, cred.mass=0.8)
summary(fit)
plot(fit)
model.code(fit)
diagnostics(fit)
Sys.setenv(MAKEFLAG = "-j4")
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan()
install.packages("Rcpp", type = "source")
install.packages('DAAG')
install.packages('doSNOW')
install.packages('lda')
install.packages("moments")
install.packages("normalp")
install.packages("pcse")
install.packages("rms")
install.packages('RTextTools')
install.packages('topicmodels')
install.packages('twang')
install.packages('twitteR')
install.packages(c("Zelig", "zipfR"))
set.seed(47586) # Set the seed for reproducible results
n <- 800 # Sample size I want to draw
k <- c("0 Heads", "1 Head", "2 Heads", "3 Heads") # Possible
# outcomes
p <- c(1, 3, 3, 1)/8 # Probability of getting 0, 1, 2, or 3 Heads
a.sample <- sample(k, size = n, prob = p, replace = TRUE)
table(a.sample)
par(mar = c(5, 5.25, .5, .5))
plot(0:10, dbinom(0:10, 10, .5), type = "h", lwd = 2, main = "", xlab = "",
ylab = "", axes = FALSE)
points(0:10, dbinom(0:10, 10, .5), pch = 19)
axis(1, 0:10, cex.axis = 1.25)
axis(2, cex.axis = 1.25, las = 2)
title(xlab = expression("X"), cex.lab = 1.5)
title(ylab = expression("P(X)"), line = 3.75, cex.lab = 1.5)
box()
par(mar = c(5, 5.25, .5, .5))
plot(0:10, pbinom(0:10, 10, .5), type = "h", lwd = 2, main = "", xlab = "",
ylab = "", axes = FALSE)
points(0:10, pbinom(0:10, 10, .5), pch = 19)
axis(1, 0:10, cex.axis = 1.25)
axis(2, cex.axis = 1.25, las = 2)
title(xlab = expression("X"), cex.lab = 1.5)
title(ylab = expression("P(X)"), line = 3.75, cex.lab = 1.5)
box()
set.seed(23212) # Set the seed for reproducible results
n <- seq(1, 200, length = 200) # Number of trials
heads <- numeric(length(n)) # Empty vector for heads in one set of trials
c.heads <- numeric(length(n)) # Empty vector for cumulative
# proportion of heads
k <- c("0 Heads", "1 Head") # Two sides of the coin
p <- c(.5, .5) # Probabilities of heads and tails
for(i in 1:length(n)){ # Start a for loop over the n trials
# Count the number of heads from n[i] trials
heads[i] <- sum(sample(k, size = n[i], prob = p, replace = TRUE) == "1 Head")
# Compute the cumulative proportion of heads
c.heads[i] <- sum(heads[1:i])/sum(n[1:i])
}
par(mar = c(5, 5.25, .5, .5))
plot(n, c.heads, type = "l", lwd = 2, ylim = c(0, 1), main = "", xlab = "",
ylab = "", cex.lab = 1.5, axes = FALSE)
axis(1, seq(0, 200, by = 50), cex.axis = 1.25)
axis(2, seq(0, 1, by = .1), cex.axis = 1.25, las = 2)
abline(h = .5)
title(xlab = expression("Number of Trials"), cex.lab = 1.5)
title(ylab = expression("Cumulative Proportion of Heads"), line = 3.75,
cex.lab = 1.5)
box()
par(mar = c(5, 5.25, .5, .5))
plot(n, c.heads, type = "l", lwd = 2, ylim = c(0, 1), main = "", xlab = "",
ylab = "", cex.lab = 1.5, axes = FALSE)
axis(1, seq(0, 200, by = 50), cex.axis = 1.25)
axis(2, seq(0, 1, by = .1), cex.axis = 1.25, las = 2)
abline(h = .5)
title(xlab = expression("Number of Trials"), cex.lab = 1.5)
title(ylab = expression("Cumulative Proportion of Heads"), line = 3.75,
cex.lab = 1.5)
box()
set.seed(23212) # Set the seed for reproducible results
n <- seq(1, 200, length = 200) # Number of trials
heads <- numeric(length(n)) # Empty vector for heads in one set of trials
c.heads <- numeric(length(n)) # Empty vector for cumulative
# proportion of heads
k <- c("0 Heads", "1 Head") # Two sides of the coin
p <- c(.5, .5) # Probabilities of heads and tails
for(i in 1:length(n)){ # Start a for loop over the n trials
# Count the number of heads from n[i] trials
heads[i] <- sum(sample(k, size = n[i], prob = p, replace = TRUE) == "1 Head")
# Compute the cumulative proportion of heads
c.heads[i] <- sum(heads[1:i])/sum(n[1:i])
}
par(mar = c(5, 5.25, .5, .5))
plot(n, c.heads, type = "l", lwd = 2, ylim = c(0, 1), main = "", xlab = "",
ylab = "", cex.lab = 1.5, axes = FALSE)
axis(1, seq(0, 200, by = 50), cex.axis = 1.25)
axis(2, seq(0, 1, by = .1), cex.axis = 1.25, las = 2)
abline(h = .5)
title(xlab = expression("Number of Trials"), cex.lab = 1.5)
title(ylab = expression("Cumulative Proportion of Heads"), line = 3.75,
cex.lab = 1.5)
box()
set.seed(2321) # Set the seed for reproducible results
n <- seq(1, 200, length = 200) # Number of trials
heads <- numeric(length(n)) # Empty vector for heads in one set of trials
c.heads <- numeric(length(n)) # Empty vector for cumulative
# proportion of heads
k <- c("0 Heads", "1 Head") # Two sides of the coin
p <- c(.5, .5) # Probabilities of heads and tails
for(i in 1:length(n)){ # Start a for loop over the n trials
# Count the number of heads from n[i] trials
heads[i] <- sum(sample(k, size = n[i], prob = p, replace = TRUE) == "1 Head")
# Compute the cumulative proportion of heads
c.heads[i] <- sum(heads[1:i])/sum(n[1:i])
}
par(mar = c(5, 5.25, .5, .5))
plot(n, c.heads, type = "l", lwd = 2, ylim = c(0, 1), main = "", xlab = "",
ylab = "", cex.lab = 1.5, axes = FALSE)
axis(1, seq(0, 200, by = 50), cex.axis = 1.25)
axis(2, seq(0, 1, by = .1), cex.axis = 1.25, las = 2)
abline(h = .5)
title(xlab = expression("Number of Trials"), cex.lab = 1.5)
title(ylab = expression("Cumulative Proportion of Heads"), line = 3.75,
cex.lab = 1.5)
box()
set.seed(23212) # Set the seed for reproducible results
n <- seq(1, 200, length = 200) # Number of trials
heads <- numeric(length(n)) # Empty vector for heads in one set of trials
c.heads <- numeric(length(n)) # Empty vector for cumulative
# proportion of heads
k <- c("0 Heads", "1 Head") # Two sides of the coin
p <- c(.5, .5) # Probabilities of heads and tails
for(i in 1:length(n)){ # Start a for loop over the n trials
# Count the number of heads from n[i] trials
heads[i] <- sum(sample(k, size = n[i], prob = p, replace = TRUE) == "1 Head")
# Compute the cumulative proportion of heads
c.heads[i] <- sum(heads[1:i])/sum(n[1:i])
}
par(mar = c(5, 5.25, .5, .5))
plot(n, c.heads, type = "l", lwd = 2, ylim = c(0, 1), main = "", xlab = "",
ylab = "", cex.lab = 1.5, axes = FALSE)
axis(1, seq(0, 200, by = 50), cex.axis = 1.25)
axis(2, seq(0, 1, by = .1), cex.axis = 1.25, las = 2)
abline(h = .5)
title(xlab = expression("Number of Trials"), cex.lab = 1.5)
title(ylab = expression("Cumulative Proportion of Heads"), line = 3.75,
cex.lab = 1.5)
box()
n <- seq(1, 200, length = 200) # Number of trials
heads <- numeric(length(n)) # Empty vector for heads in one set of trials
c.heads <- numeric(length(n)) # Empty vector for cumulative
# proportion of heads
k <- c("0 Heads", "1 Head") # Two sides of the coin
p <- c(.5, .5) # Probabilities of heads and tails
for(i in 1:length(n)){ # Start a for loop over the n trials
# Count the number of heads from n[i] trials
heads[i] <- sum(sample(k, size = n[i], prob = p, replace = TRUE) == "1 Head")
# Compute the cumulative proportion of heads
c.heads[i] <- sum(heads[1:i])/sum(n[1:i])
}
par(mar = c(5, 5.25, .5, .5))
plot(n, c.heads, type = "l", lwd = 2, ylim = c(0, 1), main = "", xlab = "",
ylab = "", cex.lab = 1.5, axes = FALSE)
axis(1, seq(0, 200, by = 50), cex.axis = 1.25)
axis(2, seq(0, 1, by = .1), cex.axis = 1.25, las = 2)
abline(h = .5)
title(xlab = expression("Number of Trials"), cex.lab = 1.5)
title(ylab = expression("Cumulative Proportion of Heads"), line = 3.75,
cex.lab = 1.5)
box()
n <- seq(1, 200, length = 200) # Number of trials
heads <- numeric(length(n)) # Empty vector for heads in one set of trials
c.heads <- numeric(length(n)) # Empty vector for cumulative
# proportion of heads
k <- c("0 Heads", "1 Head") # Two sides of the coin
p <- c(.5, .5) # Probabilities of heads and tails
for(i in 1:length(n)){ # Start a for loop over the n trials
# Count the number of heads from n[i] trials
heads[i] <- sum(sample(k, size = n[i], prob = p, replace = TRUE) == "1 Head")
# Compute the cumulative proportion of heads
c.heads[i] <- sum(heads[1:i])/sum(n[1:i])
}
par(mar = c(5, 5.25, .5, .5))
plot(n, c.heads, type = "l", lwd = 2, ylim = c(0, 1), main = "", xlab = "",
ylab = "", cex.lab = 1.5, axes = FALSE)
axis(1, seq(0, 200, by = 50), cex.axis = 1.25)
axis(2, seq(0, 1, by = .1), cex.axis = 1.25, las = 2)
abline(h = .5)
title(xlab = expression("Number of Trials"), cex.lab = 1.5)
title(ylab = expression("Cumulative Proportion of Heads"), line = 3.75,
cex.lab = 1.5)
box()
library(shiny)
runExample('01_hello')
runExample('01_hello')
faithful
setwd("~/Dropbox/1_Projects/DARA")
runApp("Shiny/hello_01/")
setwd("~/Dropbox/1_Projects/DARA/Shiny")
runApp('App-1')
runApp('App-1')
runApp('App-1', display.mode = 'showcase')
runApp('App-1', display.mode = 'showcase')
runApp('App-1', display.mode = 'showcase')
runApp('App-1', display.mode = 'showcase')
runApp('App-1')
runApp('App-1')
